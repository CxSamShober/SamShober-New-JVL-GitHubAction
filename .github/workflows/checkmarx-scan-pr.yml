# This is a basic workflow to create GitHub Issues using the Checkmarx CxFlow GitHub Action.  It runs on a push to the main branch.
#
# The following GitHub Secrets must be first defined:
#   - CHECKMARX_URL
#   - CHECKMARX_USER
#   - CHECKMARX_PASSWORD
#   - CHECKMARX_CLIENT_SECRET
#   - GH_TOKEN
#
# Update the 'team' field to reflect the team name used in Checkmarx.
#
# For full documentation, including a list of all inputs, please refer to the README https://github.com/checkmarx-ts/checkmarx-cxflow-github-action

name: CxFlow-GitHub-Issue-PR
# Controls when the action will run. Triggers the workflow on push or pull request events but only for the master branch
on:
  pull_request:
    types: [opened, reopened, synchronize]
    branches:
      - master
      - main

# A workflow run is made up of one or more jobs that can run sequentially or in parallel - this job is specifically configured to use the Checkmarx CxFlow Action
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on - Ubuntu is required as Docker is leveraged for the action
    runs-on: ubuntu-latest
    # Steps require - checkout code, run CxFlow Action, Upload SARIF report (optional)
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - name: Checkmarx CxFlow Action
      uses: checkmarx-ts/checkmarx-cxflow-github-action@v1.1
      with:
        project: GithubActionTest
        team: /CxServer
        checkmarx_url: ${{ secrets.CHECKMARX_URL }}  # To be stored in GitHub Secrets.
        checkmarx_username: ${{ secrets.CHECKMARX_USERNAME }}  # To be stored in GitHub Secrets.
        checkmarx_password: ${{ secrets.CHECKMARX_PASSWORD }}  # To be stored in GitHub Secrets.
        checkmarx_client_secret: ${{ secrets.CHECKMARX_CLIENT_SECRET }}  # To be stored in GitHub Secrets.
        github_token: ${{secrets.GH_TOKEN}}  # To be stored in GitHub Secrets.
        incremental: false
        break_build: true
        scanners: sast
        bug_tracker: NONE
        params: --checkmarx.scan-preset=High and Medium --cxflow.enabled-vulnerability-scanners=sast --cxflow.enabled-vulnerability-scanners=sca --sca.appUrl=https://sca.scacheckmarx.com --sca.apiUrl=https://api.scacheckmarx.com --sca.accessControlUrl=https://platform.checkmarx.net --sca.tenant=${{ secrets.SCA_TENANT }} --sca.username=${{ secrets.SCA_USERNAME }} --sca.password=${{ secrets.SCA_PASSWORD }} --checkmarx.incremental=false --namespace=${{ github.repository_owner }} --repo-name=${{ github.event.repository.name }}  --branch=${{ github.ref }} --merge-id=${{ github.event.number }}
   
   #scan code with SCA
        sca_api_url: https://api.scacheckmarx.com # optional, default is https://api.scacheckmarx.com
        # Provide SCA APP URL
        sca_app_url: https://sca.scacheckmarx.com # optional, default is https://sca.scacheckmarx.com
        # Provide SCA Access Control URL
        sca_access_control_url: https://platform.checkmarx.net # optional, default is https://platform.checkmarx.net
        # Provide SCA Tenant
        sca_tenant: ${{ secrets.SCA_TENANT }}  # optional, default is sca-champions
        # Provide SCA Username
        sca_username: ${{ secrets.SCA_USERNAME }}   # optional, default is 
        # Provide SCA Password
        sca_password: ${{ secrets.SCA_PASSWORD }} # optional, default is 
      
   # Scan code with KICS
    - name: run kics Scan
      uses: checkmarx/kics-action@v1.1
      with:
          path: '.'
          output_path: 'results.json'
          verbose: true
    - name: display kics results
      run: | 
        cat results.json
    - name: Display Counters
      run: |
          cat results.json | jq '.severity_counters'
